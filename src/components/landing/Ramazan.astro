<div class="max-w-4xl mx-auto mb-2 badge text-white bg-red-500 rounded-md px-2 py-1 mb-4 text-center">Uygulama Şuan Test Aşamasındadır</div>
  
  <div class="flex justify-between max-w-4xl mx-auto mb-2 border-b border-gray-700">
    <div class="flex items-right justify-right mb-2 text-sm dark:text-white">🌐 &nbsp;İstanbul</div>
    <div id="currentTime" class="flex items-right justify-right mb-2 dark:text-white"></div>
    <div class="flex items-left justify-left mb-2 text-sm dark:text-white">🗓️ &nbsp; <span class="text-sm dark:text-white" id="currentDateWithoutYear"></span></div>
  </div>
  <div id="remainingToIftarContainer" class="max-w-4xl mx-auto rounded-md bg-orange-50 p-4 dark:bg-gray-800">
    <div class="rounded-md bg-orange-50 p-4 dark:bg-gray-800">
      <div class="flex items-center justify-center">
        <div id="remainingToIftar" class=" text-4xl font-medium text-orange-800 dark:text-orange-200"></div>
      </div>
    </div>
  </div>
  <div id="remainingToImsakContainer" class="max-w-4xl mx-auto rounded-md bg-blue-50 p-4 dark:bg-gray-800 hidden">
    <div class="rounded-md bg-blue-50 p-4 dark:bg-gray-800">
      <div class="flex items-center justify-center">
        <div id="remainingToImsak" class=" text-4xl font-medium text-blue-800 dark:text-blue-200"></div>
      </div>
    </div>
  </div>
  <div class="mt-6 max-w-4xl mx-auto">
    <div class="bg-white dark:bg-gray-700 shadow-lg rounded-lg overflow-hidden">
      <div class="px-4 py-5 sm:p-6">
        <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">İmsak ve İftar Vakitleri</h3>
        <div class="mt-2 max-w-xl text-sm text-gray-500 dark:text-gray-400"></div>
        <div class="mt-5">
          <div id="imsakContainer" class="rounded-md bg-blue-50 p-4 dark:bg-gray-800">
            <div class="flex items-center justify-between">
              <div class="text-sm font-medium text-blue-800 dark:text-blue-200">🌙 &nbsp; İmsak Vakti</div>
              <div class="text-lg font-semibold text-blue-900 dark:text-blue-300" id="imsakTime"></div>
            </div>
          </div>
          <div id="iftarContainer" class="mt-3 rounded-md bg-orange-50 p-4 dark:bg-gray-800">
            <div class="flex items-center justify-between">
              <div class="text-sm font-medium text-orange-800 dark:text-orange-200">🕌 &nbsp; İftar Vakti</div>
              <div class="text-lg font-semibold text-orange-900 dark:text-orange-300" id="iftarTime"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="max-w-4xl mx-auto mt-6">
    <article class="bg-white dark:bg-gray-700 shadow-lg rounded-lg overflow-hidden">
      <div class="px-4 py-5 sm:p-6">
        <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">Günün Ayeti</h3>
        <div class="mt-5">
          <div class="mt-3 rounded-md bg-orange-50 p-4 dark:bg-gray-800">
            <div class="text-sm italic text-gray-900 dark:text-white">
              "Ey iman edenler! oruç sizden önce gelip geçmiş ümmetlere farz kılındığı gibi size de farz kılındı. Umulur ki korunursunuz."
            </div>
            <span class="text-sm italic text-orange-900 dark:text-red-300">(Bakara Suresi, 183. Ayet)</span>
          </div>
        </div>
      </div>
    </article>
  </div>
  <div id="installModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="flex items-center justify-center min-h-screen">
        <div class="relative mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white dark:bg-gray-700 transition duration-300 ease-in-out">
            <div class="text-center">
                <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">Uygulamayı Yükle</h3>
                <div class="mt-2 px-7 py-3">
                    <p class="text-sm text-gray-500 dark:text-gray-200">Bu uygulamayı ana ekranınıza ekleyin ve daha hızlı erişim sağlayın.</p>
                </div>
                <div class="mt-4 flex justify-center gap-4">
                    <button id="confirmInstall" class="px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out">
                        Yükle
                    </button>
                    <button id="cancelInstall" class="px-4 py-2 bg-white text-gray-700 text-base font-medium rounded-md shadow-sm hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-500 transition duration-150 ease-in-out">
                        İptal
                    </button>
                </div>
            </div>
            <div class="absolute top-0 right-0 pt-4 pr-4">
                <button id="closeModal" class="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500">
                    <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
</div>
  <footer class="max-w-4xl  mx-auto flex justify-between items-center mt-12 text-sm text-gray-500 dark:text-gray-400">
        <p>© 2024 created by BYK & mdenesfe</p>
    </div>
    <div>
        <button id="themeToggle" class="py-2 px-4 text-white rounded bg-gray-50 hover:bg-gray-50 dark:hover:bg-gray-800 hover:text-gray-900 dark:bg-gray-800 transition duration-300 ease-in-out"></button>
    </div>
</footer>





<script>
document.addEventListener("DOMContentLoaded", function () {
    const installModal = document.getElementById('installModal');
    const confirmInstall = document.getElementById('confirmInstall');
    const cancelInstall = document.getElementById('cancelInstall');
    const closeModal = document.getElementById('closeModal');
    let beforeInstallPromptEvent = null;

    window.addEventListener("beforeinstallprompt", function(e) {
        e.preventDefault();
        beforeInstallPromptEvent = e;
        installModal.classList.toggle('hidden', !beforeInstallPromptEvent);
    });

    function handleInstallDecision(event, isConfirmed) {
        if (!beforeInstallPromptEvent) return;
        if (isConfirmed) {
            beforeInstallPromptEvent.prompt();
            beforeInstallPromptEvent.userChoice.then((choiceResult) => {
                console.log(`User ${choiceResult.outcome === 'accepted' ? 'accepted' : 'dismissed'} the install prompt`);
                resetInstallPrompt();
            });
        } else {
            resetInstallPrompt();
        }
    }

    function resetInstallPrompt() {
        installModal.classList.add('hidden');
        beforeInstallPromptEvent = null;
    }

    confirmInstall.addEventListener("click", () => handleInstallDecision(event, true));
    cancelInstall.addEventListener("click", resetInstallPrompt);
    closeModal.addEventListener("click", resetInstallPrompt);

    const themeToggle = document.getElementById("themeToggle");
    const root = document.documentElement;
    const imsakTimeEl = document.getElementById("imsakTime");
    const iftarTimeEl = document.getElementById("iftarTime");
    const currentDateEl = document.getElementById("currentDateWithoutYear");
    const currentTimeEl = document.getElementById("currentTime");
    const imsakContainer = document.getElementById("remainingToImsakContainer");
    const iftarContainer = document.getElementById("remainingToIftarContainer");
    const remainingToImsakEl = document.getElementById("remainingToImsak");
    const remainingToIftarEl = document.getElementById("remainingToIftar");

    const times = {
        "2024-03-05": { imsak: "05:49", iftar: "19:13" },
        "2024-03-06": { imsak: "05:48", iftar: "19:14" },
    };

    themeToggle.addEventListener("click", () => {
        const newTheme = root.classList.toggle("dark") ? "dark" : "light";
        localStorage.setItem("theme", newTheme);
        themeToggle.textContent = newTheme === "dark" ? "💡" : "🌑";
        
    });

    function updateTheme() {
        const preferredTheme = localStorage.getItem("theme") || (window.matchMedia('(prefers-color-scheme: dark)').matches ? "dark" : "light");
        root.classList.toggle("dark", preferredTheme === "dark");
        themeToggle.textContent = preferredTheme === "dark" ? "💡" : "🌑";
    }

    function formatDate(date) {
        return date.toISOString().split('T')[0];
    }

    function dateFromTimeStr(now, timeStr) {
        const [hour, minute] = timeStr.split(":").map(Number);
        return new Date(now.getFullYear(), now.getMonth(), now.getDate(), hour, minute);
    }

    function formatRemainingTime(milliseconds) {
        const hours = Math.floor(milliseconds / (1000 * 60 * 60));
        const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((milliseconds % (1000 * 60)) / 1000);
        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    function updateDateTimeDisplays() {
        const now = new Date();
        const todayFormatted = formatDate(now);
        const tomorrowFormatted = formatDate(new Date(now.getTime() + 86400000));
        const todayTimes = times[todayFormatted] || { imsak: "N/A", iftar: "N/A" };
        const tomorrowTimes = times[tomorrowFormatted] || todayTimes;
        const { imsak, iftar } = now >= dateFromTimeStr(now, todayTimes.iftar) ? tomorrowTimes : todayTimes;

        imsakTimeEl.textContent = imsak;
        iftarTimeEl.textContent = iftar;
        currentDateEl.textContent = now.toLocaleDateString("tr-TR", { weekday: "long", month: "long", day: "numeric" });
        currentTimeEl.textContent = now.toLocaleTimeString("tr-TR", { hour: '2-digit', minute: '2-digit' });

        const imsakDate = now > dateFromTimeStr(now, todayTimes.iftar) ? dateFromTimeStr(new Date(now.getTime() + 86400000), tomorrowTimes.imsak) : dateFromTimeStr(now, imsak);
        const iftarDate = dateFromTimeStr(now, iftar);
        const remaining = now < imsakDate ? formatRemainingTime(imsakDate - now) : formatRemainingTime(iftarDate - now);
        const isIftarTime = now >= imsakDate && now < iftarDate;

        imsakContainer.classList.toggle("hidden", isIftarTime);
        iftarContainer.classList.toggle("hidden", !isIftarTime);
        (isIftarTime ? remainingToIftarEl : remainingToImsakEl).textContent = remaining;
    }

    updateTheme();
    updateDateTimeDisplays();
    setInterval(updateDateTimeDisplays, 1000);
});

</script>
  